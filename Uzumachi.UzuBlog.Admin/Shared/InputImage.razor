@inject IJSRuntime JSRuntime
<div class="inputImage">
    @if( imageBase64 != null ) {
        <div class="mb-3">
            <img class="img-thumbnail rounded mb-2" src="@imageBase64" width="200">
            <button class="btn btn-sm btn-outline-danger" role="button" type="button" @onclick="RemoveImage">Remove Image</button>
        </div>
    }

    <label for="inputImage" class="form-label inputImage__label">@Label</label>
    <InputFile @key="_inputFileId" class="form-control inputImage__input" id="inputImage" OnChange="LoadFiles" accept="image/*" />
</div>
@code {
    [Parameter]
    public string Label { get; set; } = "Select image";

    private IBrowserFile? file;
    private string? imageBase64;
    private string _inputFileId = Guid.NewGuid().ToString();
    private long maxFileSize = 1024 * 1024 * 2;

    private async Task LoadFiles(InputFileChangeEventArgs e) {
        file = e.File;

        var buffers = new byte[file.Size];
        await file.OpenReadStream(maxFileSize).ReadAsync(buffers);
        string imageType = file.ContentType;
        imageBase64 = $"data:{imageType};base64,{Convert.ToBase64String(buffers)}";

        await JSRuntime.InvokeVoidAsync("console.log", file);

        //TODO: Save image on server
    }

    private void RemoveImage() {
        file = null;
        imageBase64 = null;
        _inputFileId = Guid.NewGuid().ToString();
    }
}
