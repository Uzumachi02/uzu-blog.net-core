@page "/posts"
@using Microsoft.Extensions.Primitives
@using Uzumachi.UzuBlog.Admin.Infrastructure.Helpers
@using Uzumachi.UzuBlog.Domain.Responses
@inject IPostService PostService
@inject NavigationManager NavManager

<PageTitle>Posts List</PageTitle>
<div class="container-fluid p-0">
    <a href="/posts/new" class="btn btn-primary float-end mt-n1"><i class="fas fa-plus"></i> New post</a>

    <div class="mb-3">
        <h1 class="h3 mb-3">Posts</h1>
    </div>

    @if( postsReponse == null ) {
        <Loading />
    } else if( postsReponse.Items != null && postsReponse.Items.Any() ) {
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-body">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Date</th>
                                    <th>Title</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach( var item in postsReponse.Items ) {
                                    <tr @key="item.Id">
                                        <td>@item.PublishDate.ToShortDateString()</td>
                                        <td>
                                            <a href="@($"/posts/edit/{item.Id}")">
                                                @item.Title
                                            </a>
                                        </td>
                                        <td class="table-action">
                                            <a href="@($"/posts/edit/{item.Id}")"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-edit-2 align-middle"><path d="M17 3a2.828 2.828 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5L17 3z"></path></svg></a>
                                            <a href="#"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-trash align-middle"><polyline points="3 6 5 6 21 6"></polyline><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path></svg></a>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>

                <div class="card">
                    <div class="card-body">
                        <Pagination Count="postsReponse.Count" CurrentPage="currentPage" BaseUrl="/posts" QueryStrings="queryStrings" PageChanged="changePage" ShowPagingSummary="true" aria-label="Page posts navigation" />
                    </div>
                </div>
            </div>
        </div>
    } else {
        <p>Posts not found</p>
    }
</div>
@code {
    private PostsReponse? postsReponse;

    private int currentPage = 1;

    private Dictionary<string, StringValues>? queryStrings;

    private async Task changePage(int pageIndex) {
        Console.WriteLine($"changePage: {pageIndex}");
        currentPage = pageIndex;

        await LoadPosts();
    }

    private async Task LoadPosts() {
        postsReponse = await PostService.GetListAsync(new PostListRequest {
            Page = currentPage
        });
    }

    protected override async Task OnInitializedAsync() {
        Console.WriteLine("OnInitializedAsync");
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        queryStrings = QueryHelpers.ParseQuery(uri.Query);

        if( queryStrings.TryGetValue("page", out var rawPage) && int.TryParse(rawPage, out var page) && page > 1 ) {
            currentPage = page;
        }

        await LoadPosts();
    }

    protected override void OnParametersSet() {
        Console.WriteLine("OnParametersSet");
    }

    protected override void OnAfterRender(bool firstRender) {
        Console.WriteLine($"OnAfterRender: {firstRender}");
    }
}
